#include "ros/ros.h"
#include <ros/package.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
#include <sstream>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Twist.h>
#include "std_msgs/Header.h"
#include <geometry_msgs/Pose.h>
#include <nav_msgs/Odometry.h>



using namespace std;
nav_msgs::Odometry goal_odom;
class Navigation{
	private:
		ros::NodeHandle nh;
		ros::Subscriber odom_sub;
		ros::Publisher cmd_vel_pub;
		
		geometry_msgs::Twist cmd_vel;
		geometry_msgs::Twist current_twist;
		geometry_msgs::Pose current_pose;
		geometry_msgs::Pose difference_pose;
		nav_msgs::Odometry current_odom;
	public:
		Navigation();
		void Odometry_Correction(const nav_msgs::Odometry &current_odom);
		//void Something();
		

};

Navigation::Navigation(){
	
	odom_sub = nh.subscribe("/odom", 10, &Navigation::Odometry_Correction, this);
	cmd_vel_pub = nh.advertise<geometry_msgs::Twist>("/move_base_simple/goal", 100);

}
void Navigation::Odometry_Correction(const nav_msgs::Odometry &current_odom){
	current_twist = current_odom.twist.twist;
	current_pose = current_odom.pose.pose;

	difference_pose.position.x = goal_odom.pose.pose.position.x - current_pose.position.x;
	difference_pose.position.y = goal_odom.pose.pose.position.y - current_pose.position.y;
	
	if((difference_pose.position.x > 0.01) && (difference_pose.position.y > 0.001)){
		cmd_vel.angular.z = atan2(difference_pose.position.y,difference_pose.position.x);
		cmd_vel.linear.x = current_twist.linear.x;
		cmd_vel_pub.publish(cmd_vel);
	}
	else{
		cmd_vel.linear.x = .0;
		cmd_vel_pub.publish(cmd_vel);
	}

}

int main(int argc, char **argv){

	ROS_INFO("Initializing navigation_node");
	ros::init(argc,argv,"navigation_node");
	cout << "what is the goal x position?" << '\n';
	cin >> goal_odom.pose.pose.position.x;
	cout << "what is the goal y position?" << '\n';
	cin >> goal_odom.pose.pose.position.y;
	Navigation navigate;
	ros::spin();
	return 0;
}
